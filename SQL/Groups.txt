-- The HAVING clause in SQL is used to filter groups of data
-- after grouping has been performed. 
-- It is like the WHERE clause, but while WHERE works
-- on individual rows, HAVING works on grouped data.


-- Use of Having Clause in Group by:
select Avg(Age) , Location from Customer
group by Location
having Avg(AGe) >40

-- print the data of those cities
--  in which ToTal AGe  is greater than 50 
--  and less than 70
 
 select SUM(Age) as TotalAge , 
 Location from Customer
 group by Location
 having Sum(AGe) between 50 and 100
 order by TotalAge
 
 
 

 



-- inline calculations:

select Age , Age*2 from Customer

select id , id+10, Name from Customer

select * from Customer
-- 1. Concat Function:
select concat(Name , Location) from Customer
select concat(Name ,' lives in ' ,  Location) from Customer

select concat('Age of ' ,Name , ' is ' , Age)
 from Customer

select concat(Name, ' lives in ' , Location) as  new from Customer

-- 2. Substring Function:
-- SUBSTRING(string, startIndex, length)
select SUbstring(Name , 1 , 4) from Customer
select Substring(Name, 1,3 ) from Customer

-- multiple substrings in single select
select substring(Name ,  2 , 4) as Name ,
substring(Location , 1, 3)  as Location
from Customer



-- changing column datatype
alter table Customer
modify Age varchar(5) 

alter table Customer
modify Age int Not null


-- add column

ALTER TABLE table_name
ADD column_name datatype;

alter table Customer
add Contact numeric(12) ;

select * from Customer;

update Customer set Contact= 9898989898
where id=1;
update Customer set Contact= 6666666666
where id=2;
update Customer set Contact= 787878787
where id=3;
update Customer set Contact= 767666666
where id=4;


-- drop column

ALTER TABLE table_name
DROP COLUMN column_name;
alter table Customer
drop column Contact

select * from Customer

-- drop constraint

ALTER TABLE table_name
DROP Index constraint_name;

alter table Customer 
drop index Unique_na

-- delete table
DROP TABLE table_name;










;
Select * from Orders
order_id (pk), customer_id  (fk) , Quantity ,
 order_date
 
-- add column Price in it 

-- insert 10 rows in it

-- what is the minimum quantity ordered.
-- what is the maximum price in orders.
-- what is the count of all orders in order table.
-- what is the TotalPrice in order table.
-- group the data by Customer_id 
-- group the data by order_date
-- group the data by order_date and customer_id
-- print the average quantity ordered per order.
-- print the Average price spent by each customer.
-- print the average Quantity ordered on each date.
-- print the maximum Quantity purchased by Customers.

-- print the orders in which Total no of quantity is 
-- greater than 5 of each date
-- print the customer_id whose  TotalPrice spent by Customer
--  is greater than 500. 
--  





